<?php

/**
 * Implements hook_init().
 */
function spwebformsync_init() {
  module_load_include("inc", "spwebformsync", "spwebformsync.form");
  module_load_include("inc", "spwebformsync", "spwebformsync.processing");
  module_load_include("inc", "spwebformsync", "spwebformsync.settings");
  module_load_include("inc", "spwebformsync", "components/spwebformsync.components");
  module_load_include('inc', 'webform', 'includes/webform.submissions');
}

/**
 * Implements hook_menu().
 */
function spwebformsync_menu() {
  $items = array();

  $items['admin/config/sp/spwebformsync'] = array(
    'title' => 'SP webformulier synchronisatie',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'spwebformsync_overview',
    'file' => 'spwebformsync.admin.inc',
    'access callback' => 'spwebformsync_access_check',
  );

  $items['admin/config/sp/spwebformsync/overview'] = array(
    'title' => 'Overzicht SP webformulier synchronisaties',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access callback' => 'spwebformsync_access_check',
    'weight' => '0',
  );

  $items['admin/config/sp/spwebformsync/configure'] = array(
    'title' => 'SP webformulier synchronisatie toevoegen of bewerken',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spwebformsync_admin_form', 5),
    'file' => 'spwebformsync.admin.inc',
    'access callback' => 'spwebformsync_access_check',
  );

  $items['admin/config/sp/spwebformsync/settings'] = array(
    'title' => 'Instellingen',
    'type' => MENU_LOCAL_TASK,
    'page callback'  => 'drupal_get_form',
    'page arguments' => array('spwebformsync_settings_form'),
    'file' => 'spwebformsync.admin.inc',
    'access callback' => 'spwebformsync_access_check',
    'weight' => '1',
  );

  $items['admin/config/sp/spwebformsync/delete/%'] = array(
    'title' => 'SP webformulier synchronisatie verwijderen',
    'page callback' => 'spwebformsync_delete',
    'page arguments' => array(5),
    'access callback' => 'spwebformsync_access_check',
    'type' => MENU_CALLBACK,
    'file' => 'spwebformsync.admin.inc',
  );

  $items['spwebformsync/group/autocomplete'] = array(
    'title' => 'SP webformsync autocomplete',
    'page callback' => 'spwebformsync_group_autocomplete',
    'access callback' => 'spwebformsync_access_check',
    'type' => MENU_CALLBACK,
    'file' => 'spwebformsync.admin.inc',
  );

  $cron_key = variable_get('cron_key');
  $items['spwebformsynccron/' . $cron_key] = array(
    'title' => 'Webformsync cron',
    'type' => MENU_CALLBACK,
    'page callback' => 'spwebformsync_customcron',
    'access arguments' => array('access content'),
  );

  $items['node/%spwebformsync_menu/webformsync'] = array(
    'title' => 'SP webformulier synchronisatie',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spwebformsync_admin_form', 1),
    'file' => 'spwebformsync.admin.inc',
    'access callback' => 'spwebformsync_access_check',
    'weight' => 10,
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function spwebformsync_admin_paths() {
  if (variable_get('node_admin_theme')) {
    return array(
      'node/*/webformsync' => TRUE,
      'node/*/webformsync/*' => TRUE,
    );
  }
}

/**
 * Menu loader callback. Load a webform node if the given nid is a webform.
 */
function spwebformsync_menu_load($nid) {
  if (!is_numeric($nid)) {
    return FALSE;
  }
  $node = node_load($nid);
  if (!isset($node->type) || !variable_get('webform_node_' . $node->type, FALSE)) {
    return FALSE;
  }
  return $nid;
}

/**
 * @return bool Has SPRBS configuration access
 */
function spwebformsync_access_check() {
  return (user_access('administer site configuration') || user_access('administer sp webformsync'));
}

/**
 * Definces permission to administer webformsync.
 */
function spwebformsync_permission() {
  return array(
    'administer sp webformsync' => array(
      'title' => 'Beheer SP webformsync',
      'description' => 'Stel in welke data uit webformulierinzendingen automatisch door te sturen naar CRM.',
    ),
  );
}

/**
 *  Implements hook_node_delete.
 */
function spwebformsync_node_delete($node) {
  // Delete spwebformsync sync data if webform is deleted.
  if ($node->type === 'webform') {
    $sync_data = variable_get('spwebformsync_sync_data', array());
    // Check if there is a spwebformsync for this webform.
    if (isset($sync_data[$node->nid])) {
      unset($sync_data[$node->nid]);
      variable_set('spwebformsync_sync_data', $sync_data);
      drupal_set_message('SP Webform sync nr. ' . $node->nid . ' attached to this form has been deleted.', 'warning');
      // To do: delete all submission sync states for this sync.
      $result = spwebformsync_delete_all_webform_submissions($node->nid);
      if (!empty($result)) {
        drupal_set_message('All postphoned webform syncs from webform nr. ' . $node->nid . ' have been deleted.', 'warning');
      }
    }
  }
}

/**
 *  Implements hook_webform_submission_insert.
 */
function spwebformsync_webform_submission_insert($node, $submission) {
  $sync_data = variable_get('spwebformsync_sync_data', FALSE);
  $sync_type = variable_get('spwebformsync_sync_type');
  // Store submission sync state.
  if (!empty($sync_data) && isset($sync_data[$node->nid])) {
    $result = spwebformsync_store_submission_sync_state($node->nid, $submission->sid, 'unprocessed');
    if (!$result) watchdog('spwebformsync', 'Error storing submission state in database (sid=' . $submission->sid . ').', array(), WATCHDOG_ERROR);
    // Sync directly if setting not cron.
    if ($sync_type === 'direct') {
      // Directly sync without check if confirmed.
      spwebformsync_process_submission($submission);
    }
  }
}

function spwebformsync_webform_submission_delete($node, $submission) {
  // Delete a record from a 3rd-party module table when a submission is deleted.
  db_delete('spwebformsync_syncstate')
    ->condition('nid', $node->nid)
    ->condition('sid', $submission->sid)
    ->execute();
  drupal_set_message('Cleaned up webform sync for the deleted submission.');
}

/*
 * Syncs not yet synced webform submissions.
 */
function spwebformsync_customcron() {
  $sync_type = variable_get('spwebformsync_sync_type');
  if ($sync_type == 'cron') {
    set_time_limit(120);
    watchdog('spwebformsync', 'Sync started by url.');
    spwebformsync_sync();
    watchdog('spwebformsync', 'Sync ended.');
  }
}

function spwebformsync_unprocessed_count($nid) {
  $query = "SELECT COUNT(sid) FROM {spwebformsync_syncstate} WHERE nid = :nid AND state = 'unprocessed'";
  $result = db_query($query, array(':nid' => $nid));
  $count = $result->fetchfield(0);
  return $count;
}

function spwebformsync_mail($key, &$message, $params) {
  switch ($key) {
  case 'check_address':
    $message['subject'] = 'Handmatig controleren adres CRM contact';
    $message['body'][] = 'Beste,';
    $message['body'][] = 'het volgende contact is via een webformulier synchronizatie toegevoegd in CRM. Het adres van dit contact moet helaas handmatig worden gecontroleerd. Komt dit te vaak voor, of onnodig, laat het dan aan het webteam weten.';
    $message['body'][] = 'CRM contact id: ' . $params['contact_id'];
    $message['body'][] = 'Te controleren adres: "' . $params['street_and_number'] . '"';
    $message['body'][] = 'Thx, het webteam';
    $message['body'][] = '(Dit is een automatisch gegenereerd bericht).';
    break;
  case 'error':
    $message['subject'] = 'Er is een fout opgetreden bij het verwerken van een webform inzending.';
    $message['body'][] = format_string($params['content'], $params['data']);
    break;
  case 'sync_mail':
    $message['subject'] = $params['subject'];
    $message['body'][] = $params['text'];
    break;
  }
}

function spwebformsync_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id === 'webform_component_edit_form') {
    if ($form['type']['#value'] === 'select') {
      $form['#validate'][] = 'spwebformsync_options_key_validate';
    }
  }
}

function spwebformsync_options_key_validate($form, &$form_state) {
  if (!empty($form_state['values'])) {
    $values = $form_state['values'];
    if ($values['type'] = 'select') {
      foreach(preg_split("/((\r?\n)|(\r\n?))/", $values['extra']['items']) as $line){
        if (!empty($line)) {
          if (!preg_match('/^[a-z_]+\|.+$/', $line)) {
            form_set_error('edit-extra-items', 'Gebruik alleen kleine letters en underscores in de sleutelwaarden van opties. (Kies handmatige invoer van sleutel|waarde paren.');
            break;
          }
        }
      }
    }
  }
}

function spwebformsync_filter_token_components($components) {
  $filtered_components = array();
  $exclude = array(
    'valid_test',
    'call_answered',
    'target_available',
    'not_available_today',
    'call_appointment',
    'caller_message',
  );
  foreach ($components as $id => $component) {
    if (in_array($component['type'], array(
      'textfield',
      'textarea',
      'select',
    )) && !in_array($component['form_key'], $exclude)) {
      $filtered_components[$id] = $component;
    }
  }
  return $filtered_components;
}

function spwebformsync_get_component_tokens($components) {
  $tokens = array();
  $filtered_components = spwebformsync_filter_token_components($components);
  if (!empty($filtered_components)) {
    foreach ($filtered_components as $component) {
      $tokens[] = '[' . $component['form_key'] . ']';
    }
  }
  return $tokens;
}
