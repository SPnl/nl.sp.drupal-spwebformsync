<?php

/**
 * Implements hook_init().
 */
function spwebformsync_init() {
  module_load_include("inc", "spwebformsync", "spwebformsync.form");
  module_load_include("inc", "spwebformsync", "spwebformsync.processing");
  module_load_include("inc", "spwebformsync", "spwebformsync.settings");
  module_load_include("inc", "spwebformsync", "components/spwebformsync.components");
  module_load_include('inc', 'webform', 'includes/webform.submissions');
}

/**
 * Implements hook_menu().
 */
function spwebformsync_menu() {
  $items = array();

  $items['admin/config/sp/spwebformsync'] = array(
    'title' => 'SP webformulier synchronisatie',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'spwebformsync_overview',
    'file' => 'spwebformsync.admin.inc',
    'access callback' => 'spwebformsync_access_check',
  );

  $items['admin/config/sp/spwebformsync/overview'] = array(
    'title' => 'Overzicht SP webformulier synchronisaties',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access callback' => 'spwebformsync_access_check',
    'weight' => '0',
  );

  $items['admin/config/sp/spwebformsync/configure'] = array(
    'title' => 'SP webformulier synchronisatie toevoegen of bewerken',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('spwebformsync_admin_form', arg(4)),
    'file' => 'spwebformsync.admin.inc',
    'access callback' => 'spwebformsync_access_check',
  );

  $items['admin/config/sp/spwebformsync/settings'] = array(
    'title' => 'Instellingen',
    'type' => MENU_LOCAL_TASK,
    'page callback'  => 'drupal_get_form',
    'page arguments' => array('spwebformsync_settings_form'),
    'file' => 'spwebformsync.admin.inc',
    'access callback' => 'spwebformsync_access_check',
    'weight' => '1',
  );

  $items['admin/config/sp/spwebformsync/delete/%'] = array(
    'title' => 'SP webformulier synchronisatie verwijderen',
    'page callback' => 'spwebformsync_delete',
    'page arguments' => array(5),
    'access callback' => 'spwebformsync_access_check',
    'type' => MENU_CALLBACK,
    'file' => 'spwebformsync.admin.inc',
  );

  $items['spwebformsync/group/autocomplete'] = array(
    'title' => 'SP webformsync autocomplete',
    'page callback' => 'spwebformsync_group_autocomplete',
    'access callback' => 'spwebformsync_access_check',
    'type' => MENU_CALLBACK,
    'file' => 'spwebformsync.admin.inc',
  );

  $cron_key = variable_get('cron_key');
  $items['spwebformsynccron/' . $cron_key] = array(
    'title' => 'Webformsync cron',
    'type' => MENU_CALLBACK,
    'page callback' => 'spwebformsync_customcron',
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * @return bool Has SPRBS configuration access
 */
function spwebformsync_access_check() {
  return (user_access('administer site configuration') || user_access('administer sp webformsync'));
}

/**
 * Definces permission to administer webformsync.
 */
function spwebformsync_permission() {
  return array(
    'administer sp webformsync' => array(
      'title' => 'Beheer SP webformsync',
      'description' => 'Stel in welke data uit webformulierinzendingen automatisch door te sturen naar CiviCRM.',
    ),
  );
}

/**
 *  Implements hook_node_delete.
 */
function spwebformsync_node_delete($node) {
  // Delete spwebformsync sync data if webform is deleted.
  if ($node->type === 'webform') {
    $sync_data = variable_get('spwebformsync_sync_data', array());
    // Check if there is a spwebformsync for this webform.
    if (isset($sync_data[$node->nid])) {
      unset($sync_data[$node->nid]);
      variable_set('spwebformsync_sync_data', $sync_data);
      drupal_set_message('SP Webform sync nr. ' . $node->nid . ' attached to this form has been deleted.', 'warning');
      // To do: delete all submission sync states for this sync.
      $result = spwebformsync_delete_all_webform_submissions($node->nid);
      if (!empty($result)) {
        drupal_set_message('All postphoned webform syncs from webform nr. ' . $node->nid . ' have been deleted.', 'warning');
      }
    }
  }
}

/**
 * Implements hook_webform_submission_insert().
 */
function spwebformsync_webform_submission_presave($node, &$submission) {
  // Set secret field value.
  $cid = spwebformsync_get_cid_by_form_key($node, 'sp_unsubscribe_link_secret');
  if (!empty($cid)) {
    if (empty($submission->data[$cid][0])) {
      $random_key = drupal_random_key(24);
      $submission->data[$cid][0] = $random_key;
    }
  }
}

/**
 *  Implements hook_webform_submission_insert.
 */
function spwebformsync_webform_submission_insert($node, $submission) {
  $sync_data = variable_get('spwebformsync_sync_data', FALSE);
  $sync_type = variable_get('spwebformsync_sync_type');
  // Store submission sync state.
  if (!empty($sync_data) && isset($sync_data[$node->nid])) {
    $result = spwebformsync_store_submission_sync_state($node->nid, $submission->sid, 'unprocessed');
    if (!$result) watchdog('spwebformsync', 'Error storing submission state in database (sid=' . $submission->sid . ').', array(), WATCHDOG_ERROR);
    // Sync directly if setting not cron.
    if ($sync_type === 'direct') {
      // Directly sync without check if confirmed.
      spwebformsync_process_submission($submission);
    }
  }
}

function spwebformsync_webform_submission_delete($node, $submission) {
  // Delete a record from a 3rd-party module table when a submission is deleted.
  db_delete('spwebformsync_syncstate')
    ->condition('nid', $node->nid)
    ->condition('sid', $submission->sid)
    ->execute();
  drupal_set_message('Cleaned up webform sync for the deleted submission.');
}

/*
 * Syncs not yet synced webform submissions.
 */
function spwebformsync_customcron() {
  $sync_type = variable_get('spwebformsync_sync_type');
  if ($sync_type == 'cron') {
    set_time_limit(120);
    watchdog('spwebformsync', 'Sync started by url.');
    spwebformsync_sync();
    watchdog('spwebformsync', 'Sync ended.');
  }
}

function spwebformsync_unprocessed_count($nid) {
  $query = "SELECT COUNT(sid) FROM {spwebformsync_syncstate} WHERE nid = :nid AND state = 'unprocessed'";
  $result = db_query($query, array(':nid' => $nid));
  $count = $result->fetchfield(0);
  return $count;
}

function spwebformsync_mail($key, &$message, $params) {
  switch ($key) {
  case 'manual_merge':
    $message['subject'] = 'Handmatig mergen CiviCRM contact';
    $message['body'][] = 'Beste,';
    $message['body'][] = 'het volgende contact is via een webformulier synchronizatie toegevoegd in CiviCRM. Dit contact moet handmatig worden samengevoegd met reeds bestaande contacten. Komt dit bericht onnodig voor, en had het contact automatisch samengevoegd kunnen worden, laat het dan weten aan het webteam.';
    $message['body'][] = 'CiviCRM contact id: ' . $params['contact_id'];
    $message['body'][] = 'Thx, het webteam';
    $message['body'][] = '(Dit is een automatisch gegenereerd bericht).';
    break;
  case 'check_name':
    $message['subject'] = 'Handmatig controleren naam CiviCRM contact';
    $message['body'][] = 'Beste,';
    $message['body'][] = 'het volgende contact is via een webformulier synchronizatie toegevoegd in CiviCRM. De naam van dit contact moet helaas handmatig worden gecorrigeerd. Komt dit te vaak voor, of onnodig, laat het dan aan het webteam weten.';
    $message['body'][] = 'CiviCRM contact id: ' . $params['contact_id'];
    $message['body'][] = 'Te corrigeren naam: "' . $params['name'] . '"';
    $message['body'][] = 'Thx, het webteam';
    $message['body'][] = '(Dit is een automatisch gegenereerd bericht).';
    break;
  case 'check_address':
    $message['subject'] = 'Handmatig controleren adres CiviCRM contact';
    $message['body'][] = 'Beste,';
    $message['body'][] = 'het volgende contact is via een webformulier synchronizatie toegevoegd in CiviCRM. Het adres van dit contact moet helaas handmatig worden gecontroleerd. Komt dit te vaak voor, of onnodig, laat het dan aan het webteam weten.';
    $message['body'][] = 'CiviCRM contact id: ' . $params['contact_id'];
    $message['body'][] = 'Te controleren adres: "' . $params['street_and_number'] . '"';
    $message['body'][] = 'Thx, het webteam';
    $message['body'][] = '(Dit is een automatisch gegenereerd bericht).';
    break;
  }
}

function spwebformsync_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id === 'webform_component_edit_form') {
    if ($form['type']['#value'] === 'select') {
      $form['#validate'][] = 'spwebformsync_options_key_validate';
    }
  }
  if ($form_id === 'webform_email_edit_form') {
    $form['template']['#description'] .= '<p>Gebruik het token: [unsubscribe_link] in de e-mail tekst om een afmeldlink toe te voegen.</p>';
  }
}

function spwebformsync_options_key_validate($form, &$form_state) {
  if (!empty($form_state['values'])) {
    $values = $form_state['values'];
    if ($values['type'] = 'select') {
      foreach(preg_split("/((\r?\n)|(\r\n?))/", $values['extra']['items']) as $line){
        if (!empty($line)) {
          if (!preg_match('/^[a-z_]+\|.+$/', $line)) {
            form_set_error('edit-extra-items', 'Gebruik alleen kleine letters en underscores in de sleutelwaarden van opties. (Kies handmatige invoer van sleutel|waarde paren.');
            break;
          }
        }
      }
    }
  }
}

/**
 * Add default webformsync hidden components to webform.
 */
function spwebformsync_node_presave($node) {
  // Check if webform.
  if (!empty($node->webform)) {
    if (!empty($node->webform['components'])) {
      $default_components = array(
        array(
          'form_key' => 'source_url',
          'title' => 'Source url',
          'found' => FALSE,
        ),
        array(
          'form_key' => 'sp_unsubscribe_link_secret',
          'title' => 'SP unsubscribe link secret',
          'found' => FALSE,
        ),
      );
      foreach ($default_components as $default_component_key => $default_component) {
        // Check if unsubscribe_secret hidden component already exists.
        $cid = spwebformsync_get_cid_by_form_key($node, $default_component['form_key']);
        if (empty($cid)) {
          // Add new component.
          $component = array(
            'name' => $default_component['title'],
            'form_key' => $default_component['form_key'],
            'type' => 'hidden',
            'mandatory' => 0,
            'weight' => 9,
            'pid' => 0,
            'extra' => array(
              'hidden_type' => 'value',
              'private' => 0,
            ),
          );
          switch ($default_component['form_key']) {
            case 'sp_unsubscribe_link_secret':
              $component['value'] = '';
              break;

            case 'source_url':
              $component['value'] = '[current-page:url]';
              break;
          }
          $node->webform['components'][] = $component;
        }
      }
    }
  }
}

/**
 * Add unsubscribe link to mimemail variables.
 */
function spwebformsync_preprocess_mimemail_message(&$variables) {
  // Check if webform submission message.
  if (!empty($variables['message']['params']['submission'])) {
    $submission = $variables['message']['params']['submission'];
    // Get unsubscribe link.
    $unsubscribe_link = spwebformsync_get_unsubscribe_link($submission);
    if ($unsubscribe_link) {
      // Replace token in body.
      $variables['body'] = str_replace('[unsubscribe_link]', $unsubscribe_link, $variables['body']);
      // Add unsubscribe link variable.
      if (valid_url($unsubscribe_link, TRUE)) {
        $variables['unsubscribe_link'] = $unsubscribe_link;
      }
    }
  }
}

/**
 * Creates an url applicable string that contains encrypted data.
 */
function spwebformsync_encrypt(array $data) {
  $data = serialize($data);
  $key = variable_get('spwebformsync_datadrop_secret_unsubscribe', 'paijeich6zoh4Mah');
  $encrypted = openssl_encrypt($data, 'AES-256-CBC', $key, 0, 'Quie9ophei2iKah1');
  $hash = urlencode(base64_encode($encrypted));
  return $hash;
}

function spwebformsync_get_unsubscribe_link($submission) {
  $unsubscribe_link = FALSE;
  $node = node_load($submission->nid);
  // Get hash.
  $cid = spwebformsync_get_cid_by_form_key($node, 'sp_unsubscribe_link_secret');
  if (!empty($cid)) {
    $secret = $submission->data[$cid][0];
    // Create unsubscribe link.
    $data = array(
      'title' => $node->title,
      'secret' => $secret,
    );
    $hash = spwebformsync_encrypt($data);
    // Add link variable.
    //$datadrop_server = variable_get('spwebformsync_datadrop_server', '');
    $datadrop_server = 'https://uitschrijven.sp.nl';
    if (!empty($datadrop_server)) {
      $unsubscribe_link = $datadrop_server . '/afmelden/' . $hash;
    }
  }
  return $unsubscribe_link;
}
